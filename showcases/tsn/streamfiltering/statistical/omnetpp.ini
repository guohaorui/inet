[General]
network = StatisticalPolicingShowcase
description = "Using time window and maximum datarate"

# disable ARP packets
*.hasGlobalArp = true

# disable all non per stream filtering related TSN features in all network nodes
*.*.hasTimeSynchronization = false
*.*.hasEgressTrafficShaping = false
*.*.hasStreamRedundancy = false
*.*.hasOutputStreams = false

# all Ethernet interfaces have 100 Mbps speed
*.*.eth[*].bitrate = 100Mbps

# configure IEEE 802.2 LLC applications in clients
*.client*.numApps = 2
*.client*.app[*].typename = "Ieee8022LlcApp"
*.client*.app[0].source.packetNameFormat = "background-%c"
*.client*.app[1].source.packetNameFormat = "video-%c"
*.client*.app[*].io.interface = "eth0"
*.client*.app[*].io.remoteSap = 0
*.client*.app[0].io.remoteAddress = "server1"
*.client*.app[1].io.remoteAddress = "server2"

# configure background streams with ~40Mbps
*.client*.app[0].source.packetLength = 1000B
*.client*.app[0].source.productionInterval = 200us + replaceUnit(sin(dropUnit(simTime() * 20)), "ms") / 20

# configure video streams with ~2Mbps
*.client*.app[1].source.packetLength = 500B
*.client*.app[1].source.productionInterval = 2ms + replaceUnit(sin(dropUnit(simTime() * 20)), "ms") / 2

# configure IEEE 802.2 LLC sink applications in servers
*.server*.numApps = 1
*.server*.app[0].typename = "Ieee8022LlcSink"
*.server*.app[0].io.localSap = 0

# enable stream encoding/decoding layer
*.switch*.bridging.streamCoder.typename = "StreamCoderLayer"
*.switch*.bridging.streamCoder.decoder.mapping = [{source: "client1", destination: "server1", stream: "c1_s1"},
                                                  {source: "client1", destination: "server2", stream: "c1_s2"},
                                                  {source: "client2", destination: "server1", stream: "c2_s1"},
                                                  {source: "client2", destination: "server2", stream: "c2_s2"}]

# enable per-stream filtering
*.switch*.bridging.streamFilter.typename = "StreamFilterLayer"
*.switch*.bridging.streamFilter.ingress.numStreams = 4
*.switch*.bridging.streamFilter.ingress.classifier.typename = "StreamClassifier"
*.switch*.bridging.streamFilter.ingress.classifier.mapping = {c1_s1: 0,
                                                              c2_s1: 1,
                                                              c1_s2: 2,
                                                              c2_s2: 3}

# configure per-stream filtering
*.switch*.bridging.streamFilter.ingress.meter[*].typename = "SlidingWindowRateMeter"
*.switch*.bridging.streamFilter.ingress.meter[*].timeWindow = 10ms
*.switch*.bridging.streamFilter.ingress.filter[*].typename = "StatisticalRateLimiter"
*.switch*.bridging.streamFilter.ingress.filter[0].maxDatarate = 40Mbps
*.switch*.bridging.streamFilter.ingress.filter[1].maxDatarate = 40Mbps
*.switch*.bridging.streamFilter.ingress.filter[2].maxDatarate = 2Mbps
*.switch*.bridging.streamFilter.ingress.filter[3].maxDatarate = 2Mbps

