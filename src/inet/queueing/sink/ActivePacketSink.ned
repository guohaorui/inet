//
// Copyright (C) 2020 OpenSim Ltd.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

package inet.queueing.sink;

import inet.queueing.base.PacketSinkBase;
import inet.queueing.contract.IActivePacketSink;

//
// This module is an active packet sink which pulls packets from the connected
// packet provider. All pulled packets are counted and deleted.
//
simple ActivePacketSink extends PacketSinkBase like IActivePacketSink
{
    parameters:
        string clockModule = default(""); // relative path of a module that implements IClock; optional
        double initialCollectionOffset @unit(s) = default(0s);
        volatile double collectionInterval @unit(s); // elapsed time between subsequent packets pulled from the connected packet provider
        bool scheduleForAbsoluteTime = default(true); // when a clock is used relative means that setting the clock will not affect the simulation time of the event
        @class(ActivePacketSink);
        @signal[packetPulled](type=inet::Packet);
        @statistic[packetPulled](title="packets pulled"; record=count,sum(packetBytes),vector(packetBytes); interpolationmode=none);
        @statistic[pulledTraffic](title="pulled traffic"; source=throughput(packetPulled); record=vector; unit=bps; interpolationmode=linear);
    gates:
        input in @labels(pull);
}

