[General]
# avoid ARP
*.*.ipv4.arp.typename = "GlobalArp"

# enable modular Ethernet protocol
*.*.ethernet.typename = "EthernetLayer"

# enable modular Ethernet interface
*.*.eth[*].typename = "LayeredEthernetInterface"
*.*.eth[*].bitrate = 100Mbps

# oscillator
**.oscillator.typename = "ConstantDriftOscillator"
*.grandMaster2.clock.clock[*].oscillator.driftRate = -30ppm
**.oscillator.driftRate = uniform(-100ppm, 100ppm)

# clock
**.defaultOverdueClockEventHandlingMode = "execute"

# enable modular bridging layer
*.bridge*.bridging.typename = "BridgingLayer"

# gPTP
*.*.app[0].domain[0].pdelayInitialOffset = 100us
*.*.app[0].domain[1].pdelayInitialOffset = 100us
*.*.app[0].domain[2].pdelayInitialOffset = 100us
*.*.app[0].domain[3].pdelayInitialOffset = 100us
*.*.app[0].domain[0].syncInitialOffset = syncInterval * 1 / 4
*.*.app[0].domain[1].syncInitialOffset = syncInterval * 2 / 4
*.*.app[0].domain[2].syncInitialOffset = syncInterval * 3 / 4
*.*.app[0].domain[3].syncInitialOffset = syncInterval * 4 / 4

[Config TwoMastersOneSyncTree]
network = GptpTreeExample

# grand master clocks
*.grandMaster1.clock.typename = "MultiClock"
*.grandMaster1.clock.numClocks = 2

# gPTP grand masters
*.grandMaster1.numApps = 1
*.grandMaster1.app[0].typename = "MultiDomainGptp"
*.grandMaster1.app[0].numDomains = 2
*.grandMaster1.app[0].clockModule = "grandMaster1.clock"
*.grandMaster1.app[0].domain[0].gptpNodeType = "MASTER_NODE"
*.grandMaster1.app[0].domain[0].masterPorts = ["eth0"]
*.grandMaster1.app[0].domain[1].gptpNodeType = "SLAVE_NODE"
*.grandMaster1.app[0].domain[1].slavePort = "eth0"

# gPTP grand masters
*.grandMaster2.numApps = 1
*.grandMaster*.app[0].typename = "MultiDomainGptp"
*.grandMaster*.app[0].numDomains = 2
*.grandMaster2.app[0].clockModule = "grandMaster2.clock"
*.grandMaster2.app[0].domain[0].gptpNodeType = "SLAVE_NODE"
*.grandMaster2.app[0].domain[0].slavePort = "eth0"
*.grandMaster2.app[0].domain[1].gptpNodeType = "MASTER_NODE"
*.grandMaster2.app[0].domain[1].masterPorts = ["eth0"]

# gPTP bridges
*.bridge*.clock.typename = "MultiClock"
*.bridge*.clock.numClocks = 2

*.bridge*.hasGptp = true
*.bridge*.gptp.typename = "MultiDomainGptp"
*.bridge*.gptp.numDomains = 2
*.bridge*.gptp.domain[*].gptpNodeType = "BRIDGE_NODE"
*.bridge1.gptp.domain[0].slavePort = "eth0"
*.bridge1.gptp.domain[0].masterPorts = ["eth1", "eth2", "eth3"]
*.bridge1.gptp.domain[1].slavePort = "eth1"
*.bridge1.gptp.domain[1].masterPorts = ["eth0", "eth2", "eth3"]
*.bridge2.gptp.domain[0].slavePort = "eth1"
*.bridge2.gptp.domain[0].masterPorts = ["eth0", "eth2", "eth3"]
*.bridge2.gptp.domain[1].slavePort = "eth0"
*.bridge2.gptp.domain[1].masterPorts = ["eth1", "eth2", "eth3"]

# gPTP end stations
*.endStation*.clock.typename = "MultiClock"
*.endStation*.clock.numClocks = 2

*.endStation*.numApps = 1
*.endStation*.app[0].typename = "MultiDomainGptp"
*.endStation*.app[0].numDomains = 2
*.endStation1.app[0].clockModule = "endStation1.clock"
*.endStation2.app[0].clockModule = "endStation2.clock"
*.endStation3.app[0].clockModule = "endStation3.clock"
*.endStation4.app[0].clockModule = "endStation4.clock"
*.endStation*.app[0].domain[*].gptpNodeType = "SLAVE_NODE"
*.endStation*.app[0].domain[*].slavePort = "eth0"

# visualization
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
*.visualizer.numDataLinkVisualizers = 2
*.visualizer.dataLinkVisualizer[*].displayLinks = true
*.visualizer.dataLinkVisualizer[*].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[0].packetDataFilter = "inet::GptpSync and domainNumber =~ 0"
*.visualizer.dataLinkVisualizer[1].packetDataFilter = "inet::GptpSync and domainNumber =~ 1"
*.visualizer.dataLinkVisualizer[0].tags = "primary GM"
*.visualizer.dataLinkVisualizer[1].tags = "hot-standby GM"
*.visualizer.dataLinkVisualizer[0].lineColor = "blue2"
*.visualizer.dataLinkVisualizer[1].lineColor = "red2"

[Config TwoMastersTwoSyncTrees]
network = GptpRingExample

# gPTP grand masters
*.grandMaster1.clock.typename = "OscillatorBasedClock"
*.grandMaster2.clock.typename = "MultiClock"
*.grandMaster2.clock.numClocks = 2

*.grandMaster*.numApps = 1
*.grandMaster*.app[0].typename = "MultiDomainGptp"
*.grandMaster1.app[0].numDomains = 4
*.grandMaster1.app[0].domain[0..1].clockModule = "grandMaster1.clock"
*.grandMaster1.app[0].domain[2].clockModule = ""
*.grandMaster1.app[0].domain[3].clockModule = ""
*.grandMaster2.app[0].numDomains = 4
*.grandMaster2.app[0].domain[2..3].clockModule = "grandMaster2.clock"

# gPTP grand master 1
*.grandMaster1.app[0].domain[0].gptpNodeType = "MASTER_NODE"
*.grandMaster1.app[0].domain[0].masterPorts = ["eth0"]
*.grandMaster1.app[0].domain[1].gptpNodeType = "MASTER_NODE"
*.grandMaster1.app[0].domain[1].masterPorts = ["eth0"]
*.grandMaster1.app[0].domain[2].typename = "SinkApp"
*.grandMaster1.app[0].domain[3].typename = "SinkApp"

# gPTP grand master 2
*.grandMaster2.app[0].domain[0].gptpNodeType = "SLAVE_NODE"
*.grandMaster2.app[0].domain[0].slavePort = "eth0"
*.grandMaster2.app[0].domain[1].gptpNodeType = "SLAVE_NODE"
*.grandMaster2.app[0].domain[1].slavePort = "eth0"
*.grandMaster2.app[0].domain[2].gptpNodeType = "MASTER_NODE"
*.grandMaster2.app[0].domain[2].masterPorts = ["eth0"]
*.grandMaster2.app[0].domain[3].gptpNodeType = "MASTER_NODE"
*.grandMaster2.app[0].domain[3].masterPorts = ["eth0"]

# gPTP bridges
*.bridge*.clock.typename = "MultiClock"
*.bridge*.clock.numClocks = 4

*.bridge*.hasGptp = true
*.bridge*.gptp.typename = "MultiDomainGptp"
*.bridge*.gptp.numDomains = 4
*.bridge*.gptp.domain[*].gptpNodeType = "BRIDGE_NODE"

# gPTP bridge 1
*.bridge1.gptp.domain[0].masterPorts = ["eth1"]
*.bridge1.gptp.domain[0].slavePort = "eth0"
*.bridge1.gptp.domain[1].masterPorts = ["eth2"]
*.bridge1.gptp.domain[1].slavePort = "eth0"
*.bridge1.gptp.domain[2].masterPorts = ["eth0", "eth1"]
*.bridge1.gptp.domain[2].slavePort = "eth2"
*.bridge1.gptp.domain[3].masterPorts = ["eth0", "eth2"]
*.bridge1.gptp.domain[3].slavePort = "eth1"

# gPTP bridge 2
*.bridge2.gptp.domain[0].masterPorts = ["eth1", "eth2"]
*.bridge2.gptp.domain[0].slavePort = "eth0"
*.bridge2.gptp.domain[1].masterPorts = ["eth2"]
*.bridge2.gptp.domain[1].slavePort = "eth1"
*.bridge2.gptp.domain[2].masterPorts = ["eth1", "eth2"]
*.bridge2.gptp.domain[2].slavePort = "eth0"
*.bridge2.gptp.domain[3].masterPorts = ["eth0", "eth2"]
*.bridge2.gptp.domain[3].slavePort = "eth1"

# gPTP bridge 3
*.bridge3.gptp.domain[0].masterPorts = ["eth1", "eth2"]
*.bridge3.gptp.domain[0].slavePort = "eth0"
*.bridge3.gptp.domain[1].masterPorts = ["eth0", "eth2"]
*.bridge3.gptp.domain[1].slavePort = "eth1"
*.bridge3.gptp.domain[2].masterPorts = ["eth2"]
*.bridge3.gptp.domain[2].slavePort = "eth0"
*.bridge3.gptp.domain[3].masterPorts = ["eth0", "eth2"]
*.bridge3.gptp.domain[3].slavePort = "eth1"

# gPTP bridge 4
*.bridge4.gptp.domain[0].masterPorts = ["eth0", "eth2"]
*.bridge4.gptp.domain[0].slavePort = "eth1"
*.bridge4.gptp.domain[1].masterPorts = ["eth0", "eth1"]
*.bridge4.gptp.domain[1].slavePort = "eth2"
*.bridge4.gptp.domain[2].masterPorts = ["eth2"]
*.bridge4.gptp.domain[2].slavePort = "eth0"
*.bridge4.gptp.domain[3].masterPorts = ["eth1"]
*.bridge4.gptp.domain[3].slavePort = "eth0"

# gPTP bridge 5
*.bridge5.gptp.domain[0].masterPorts = ["eth1", "eth2"]
*.bridge5.gptp.domain[0].slavePort = "eth0"
*.bridge5.gptp.domain[1].masterPorts = ["eth0", "eth2"]
*.bridge5.gptp.domain[1].slavePort = "eth1"
*.bridge5.gptp.domain[2].masterPorts = ["eth1", "eth2"]
*.bridge5.gptp.domain[2].slavePort = "eth0"
*.bridge5.gptp.domain[3].masterPorts = ["eth2"]
*.bridge5.gptp.domain[3].slavePort = "eth1"

# gPTP bridge 6
*.bridge6.gptp.domain[0].masterPorts = ["eth2"]
*.bridge6.gptp.domain[0].slavePort = "eth0"
*.bridge6.gptp.domain[1].masterPorts = ["eth0", "eth2"]
*.bridge6.gptp.domain[1].slavePort = "eth1"
*.bridge6.gptp.domain[2].masterPorts = ["eth1", "eth2"]
*.bridge6.gptp.domain[2].slavePort = "eth0"
*.bridge6.gptp.domain[3].masterPorts = ["eth0", "eth2"]
*.bridge6.gptp.domain[3].slavePort = "eth1"

# gPTP end stations
*.endStation*.clock.typename = "MultiClock"
*.endStation*.clock.numClocks = 4

*.endStation*.numApps = 1
*.endStation*.app[0].typename = "MultiDomainGptp"
*.endStation*.app[0].numDomains = 4
*.endStation1.app[0].clockModule = "endStation1.clock"
*.endStation2.app[0].clockModule = "endStation2.clock"
*.endStation3.app[0].clockModule = "endStation3.clock"
*.endStation4.app[0].clockModule = "endStation4.clock"
*.endStation*.app[0].domain[*].gptpNodeType = "SLAVE_NODE"
*.endStation*.app[0].domain[*].slavePort = "eth0"

# visualization
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
*.visualizer.numDataLinkVisualizers = 4
*.visualizer.dataLinkVisualizer[*].displayLinks = true
*.visualizer.dataLinkVisualizer[*].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[0].packetDataFilter = "inet::GptpSync and domainNumber =~ 0"
*.visualizer.dataLinkVisualizer[1].packetDataFilter = "inet::GptpSync and domainNumber =~ 1"
*.visualizer.dataLinkVisualizer[2].packetDataFilter = "inet::GptpSync and domainNumber =~ 2"
*.visualizer.dataLinkVisualizer[3].packetDataFilter = "inet::GptpSync and domainNumber =~ 3"
*.visualizer.dataLinkVisualizer[0].tags = "primary GM domain0"
*.visualizer.dataLinkVisualizer[1].tags = "primary GM domain1"
*.visualizer.dataLinkVisualizer[2].tags = "hot-standby GM domain0"
*.visualizer.dataLinkVisualizer[3].tags = "hot-standby GM domain1"
*.visualizer.dataLinkVisualizer[0].lineColor = "blue4"
*.visualizer.dataLinkVisualizer[1].lineColor = "blue1"
*.visualizer.dataLinkVisualizer[2].lineColor = "red4"
*.visualizer.dataLinkVisualizer[3].lineColor = "red1"

[Config NormalOperation]
extends = TwoMastersTwoSyncTrees

# source applications
*.endStation1.numApps = 2
*.endStation1.app[1].typename = "UdpApp"
*.endStation1.app[1].source.packetLength = 10B
*.endStation1.app[1].source.productionInterval = 1ms
*.endStation1.app[1].io.destAddress = "endStation4"
*.endStation1.app[1].io.destPort = 1000
*.endStation1.app[1].source.clockModule = "^.^.clock"

# sink applications
*.endStation4.numApps = 2
*.endStation4.app[1].typename = "UdpSink"
*.endStation4.app[1].localPort = 1000

# bridges
*.bridge*.eth[*].macLayer.queue.typename = "GatingPriorityQueue"
*.bridge*.eth[*].macLayer.queue.numQueues = 2
*.bridge*.eth[*].macLayer.queue.classifier.typename = "ContentBasedClassifier"
*.bridge*.eth[*].macLayer.queue.classifier.packetFilters = "source*;Gptp*"
*.bridge*.eth[*].macLayer.queue.classifier.packetDataFilters = "*;*"
*.bridge*.eth[*].macLayer.queue.queue[*].typename = "DropTailQueue"
*.bridge*.eth[*].macLayer.queue.gate[0].typename = "PeriodicGate"
*.bridge*.eth[*].macLayer.queue.gate[0].initiallyOpen = true
*.bridge*.eth[*].macLayer.queue.gate[0].durations = [100us, 900us]
*.bridge*.eth[*].macLayer.queue.gate[0].clockModule = "^.^.^.^.clock"
*.bridge*.eth[*].macLayer.queue.gate[1].typename = "PeriodicGate"
*.bridge*.eth[*].macLayer.queue.gate[1].initiallyOpen = false
*.bridge*.eth[*].macLayer.queue.gate[1].durations = [100us, 900us]
*.bridge*.eth[*].macLayer.queue.gate[1].clockModule = "^.^.^.^.clock"

# visualization
*.visualizer.numDataLinkVisualizers = 5
*.visualizer.dataLinkVisualizer[0..3].fadeOutMode = "simulationTime"
*.visualizer.dataLinkVisualizer[0..3].fadeOutTime = 125ms
*.visualizer.dataLinkVisualizer[4].packetFilter = "source*"
*.visualizer.dataLinkVisualizer[4].tags = "application"
*.visualizer.dataLinkVisualizer[4].lineColor = "black"
*.visualizer.packetDropVisualizer[0].displayPacketDrops = true

[Config LinkFailure]
extends = NormalOperation

*.scenarioManager.script = xml("<scenario> \
                                  <at t='2'> \
                                    <disconnect src-module='grandMaster1' src-gate='ethg[0]'/> \
                                  </at> \
                                </scenario>")

[Config Failover]
extends = LinkFailure

*.scenarioManager.script = xml("<scenario> \
                                  <at t='2'> \
                                    <disconnect src-module='grandMaster1' src-gate='ethg[0]'/> \
                                  </at> \
                                  <at t='2'> \
                                    <set-param module='bridge1.clock' par='activeClockIndex' value='2'/> \
                                    <set-param module='bridge2.clock' par='activeClockIndex' value='2'/> \
                                    <set-param module='bridge3.clock' par='activeClockIndex' value='2'/> \
                                    <set-param module='bridge4.clock' par='activeClockIndex' value='2'/> \
                                    <set-param module='bridge5.clock' par='activeClockIndex' value='2'/> \
                                    <set-param module='bridge6.clock' par='activeClockIndex' value='2'/> \
                                    <set-param module='endStation1.clock' par='activeClockIndex' value='2'/> \
                                    <set-param module='endStation2.clock' par='activeClockIndex' value='2'/> \
                                    <set-param module='endStation3.clock' par='activeClockIndex' value='2'/> \
                                    <set-param module='endStation4.clock' par='activeClockIndex' value='2'/> \
                                  </at> \
                                </scenario>")

