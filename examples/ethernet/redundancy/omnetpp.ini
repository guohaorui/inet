[General]
network = EthernetRedundancyExample
description = "(abstract)"

# visualizer
*.visualizer.infoVisualizer.modules = "*.source.app[0].source or *.destination.app[0]"

# source
*.source.numApps = 1
*.source.app[0].typename = "UdpApp"
*.source.app[0].io.destAddress = "destination"
*.source.app[0].io.destPort = 1000
*.source.app[0].source.displayStringTextFormat = "sent %p pk (%l)"
*.source.app[0].source.packetLength = 1200B
*.source.app[0].source.productionInterval = truncnormal(100us,50us)

# destination
*.destination.numApps = 1
*.destination.app[0].typename = "UdpSink"
*.destination.app[0].localPort = 1000

# avoid ARP
*.*.ipv4.arp.typename = "GlobalArp"

# Ethernet
*.*.bridging.typename = "BridgingLayer"
*.*.ethernet.typename = "EthernetLayer"
*.*.eth[*].typename = "LayeredEthernetInterface"
*.*.eth[*].bitrate = 100Mbps

# enable stream policing in layer 2
*.source.ieee8021r.typename = "Ieee8021rLayer"
*.destination.ieee8021r.typename = "Ieee8021rLayer"
*.*.ieee8021q.typename = "Ieee8021qProtocol"

# always use 802.1R protocol for egress traffic on all network interfaces
*.*.eth[*].protocol = "ieee8021rtag"

# all interfaces must have the same address to accept packets from all streams
*.destination.eth[*].address = "0A-AA-12-34-56-78"

[Config ManualRedundancy]
description = "Manually configuring stream redundancy"

# configure all egress traffic as part of stream s1, start sequence numbering
*.source.ieee8021r.policy.streamIdentifier.identifier.mapping = [{packetFilter: "*", stream: "s1"}]
# encode egress stream s1 to VLAN 1
*.source.ieee8021r.policy.streamCoder.encoder.mapping = {s1: 1}

# map destination MAC address and VLAN pairs to network interfaces
*.s1.macTable.addressTable = [{address: "destination", vlan: 1, interface: "eth0"}, \
                              {address: "destination", vlan: 2, interface: "eth1"}]
# allow ingress traffic from VLAN 1
*.s1.ieee8021q.qTagHeaderChecker.vlanIdFilter = [1]
# enable stream policing in layer 2 bridging
*.s1.bridging.streamRelay.typename = "StreamRelayLayer"
*.s1.bridging.streamCoder.typename = "StreamCoderLayer"
# map eth2 VLAN 1 to stream s1
*.s1.bridging.streamCoder.decoder.mapping = [{interface: "eth2", vlan: 1, stream: "s1"}]
# eliminate duplicates from stream s1
*.s1.bridging.streamRelay.merger.mapping = {s1: "s1"}
# split stream s1 into s2a and s2b
*.s1.bridging.streamRelay.splitter.mapping = {s1: ["s2a", "s2b"]}
# map stream s2a to VLAN 1 and s2b to VLAN 2
*.s1.bridging.streamCoder.encoder.mapping = {s2a: 1, s2b: 2}

# map destination MAC address and VLAN pairs to network interfaces
*.s2a.macTable.addressTable = [{address: "destination", vlan: 1, interface: "eth0"}, \
                               {address: "destination", vlan: 2, interface: "eth1"}]
# allow ingress traffic from VLAN 1 and 2
*.s2a.ieee8021q.qTagHeaderChecker.vlanIdFilter = [1, 2]
# enable stream policing in layer 2 bridging
*.s2a.bridging.streamRelay.typename = "StreamRelayLayer"
*.s2a.bridging.streamCoder.typename = "StreamCoderLayer"
# map eth2 VLAN 1 to stream s2a and eth1 VLAN 2 to stream s2b-s2a
*.s2a.bridging.streamCoder.decoder.mapping = [{interface: "eth2", vlan: 1, stream: "s2a"}, \
                                                    {interface: "eth1", vlan: 2, stream: "s2b-s2a"}]
# merge streams s2a and s2b-s2a in into s3a
*.s2a.bridging.streamRelay.merger.mapping = {s2a: "s3a", "s2b-s2a": "s3a"}
# split stream s2a into s3a and s2b
*.s2a.bridging.streamRelay.splitter.mapping = {s3a: ["s3a", "s2b"]}
# map stream s3a to VLAN 1 and s2b to VLAN 2
*.s2a.bridging.streamCoder.encoder.mapping = {s3a: 1, s2b: 2}

# map destination MAC address and VLAN pairs to network interfaces
*.s2b.macTable.addressTable = [{address: "destination", vlan: 1, interface: "eth0"}, \
                               {address: "destination", vlan: 2, interface: "eth1"}]
# allow ingress traffic from VLAN 1 and 2
*.s2b.ieee8021q.qTagHeaderChecker.vlanIdFilter = [1, 2]
# enable stream policing in layer 2 bridging
*.s2b.bridging.streamRelay.typename = "StreamRelayLayer"
*.s2b.bridging.streamCoder.typename = "StreamCoderLayer"
# map eth2 VLAN 2 to stream s2b and eth1 VLAN 1 to stream s2a-s2b
*.s2b.bridging.streamCoder.decoder.mapping = [{interface: "eth2", vlan: 2, stream: "s2b"}, \
                                                    {interface: "eth1", vlan: 2, stream: "s2a-s2b"}]
# merge streams s2b and s2a-s2b in into s3b
*.s2b.bridging.streamRelay.merger.mapping = {s2b: "s3b", "s2a-s2b": "s3b"}
# split stream s2b into s3b and s2a
*.s2b.bridging.streamRelay.splitter.mapping = {s3b: ["s3b", "s2a"]}
# stream s3a maps to VLAN 1 and s2a to VLAN 2
*.s2b.bridging.streamCoder.encoder.mapping = {s3b: 1, s2a: 2}

# map destination MAC address and VLAN pairs to network interfaces
*.s3a.macTable.addressTable = [{address: "destination", vlan: 1, interface: "eth0"}]
# allow ingress traffic from VLAN 1
*.s3a.ieee8021q.qTagHeaderChecker.vlanIdFilter = [1]

# map destination MAC address and VLAN pairs to network interfaces
*.s3b.macTable.addressTable = [{address: "destination", vlan: 1, interface: "eth0"}]
# allow ingress traffic from VLAN 1
*.s3b.ieee8021q.qTagHeaderChecker.vlanIdFilter = [1]

# allow ingress traffic from VLAN 1
*.destination.ieee8021q.qTagHeaderChecker.vlanIdFilter = [1]
# map eth0 VLAN 1 to stream s3a and eth1 VLAN 1 to stream s3b
*.destination.ieee8021r.policy.streamCoder.decoder.mapping = [{interface: "eth0", vlan: 1, stream: "s3a"}, \
                                                        {interface: "eth1", vlan: 1, stream: "s3b"}]
# merge streams s3a and s3b into null stream
*.destination.ieee8021r.policy.streamRelay.merger.mapping = {s3a: "", s3b: ""}

[Config StreamRedundancyConfigurator]
description = "Automatically configuring stream redundancy"

# enable stream policing in layer 2
*.*.bridging.streamRelay.typename = "StreamRelayLayer"
*.*.bridging.streamCoder.typename = "StreamCoderLayer"

# enable all automatic configurators
*.hasStreamRedundancyConfigurator = true

# seamless stream redundancy configuration
*.streamRedundancyConfigurator.configuration = [{name: "S1", packetFilter: "*", source: "source", destination: "destination",
                                                 trees: [[["source", "s1", "s2a", "s3a", "destination"]],
                                                         [["source", "s1", "s2b", "s3b", "destination"]],
                                                         [["source", "s1", "s2a", "s2b", "s3b", "destination"]],
                                                         [["source", "s1", "s2b", "s2a", "s3a", "destination"]]]}]

[Config TsnConfigurator]
description = "Automatically configuring stream redundancy and gate scheduling"

# enable all automatic configurators
*.gateSchedulingConfigurator.typename = "SimpleGateSchedulingConfigurator"
*.hasStreamRedundancyConfigurator = true
*.hasTsnConfigurator = true

# deterministic application traffic configuration
*.source.app[0].source.packetLength = 100B
*.source.app[0].source.productionInterval = 5ms

# gate scheduling visualizer
*.visualizer.gateVisualizer.displayGates = true
*.visualizer.gateVisualizer.displayDuration = 100us
*.visualizer.gateVisualizer.gateFilter = "*.source.eth[0].** or *.s1.eth[0..1].** or *.s2*.eth[0..1].** or *.s3*.eth[0].** "
*.visualizer.gateVisualizer.height = 16

# gating configuration
*.*.eth[*].macLayer.queue.typename = "GatingPriorityQueue"
*.*.eth[*].macLayer.queue.numQueues = 1
*.*.eth[*].macLayer.queue.buffer.typename = ""
*.*.eth[*].macLayer.queue.classifier.typename = "ContentBasedClassifier"
*.*.eth[*].macLayer.queue.classifier.packetFilters = "*"
*.*.eth[*].macLayer.queue.classifier.packetDataFilters = "*"
*.*.eth[*].macLayer.queue.queue[*].typename = "DropTailQueue"
*.*.eth[*].macLayer.queue.gate[*].bitrate = 100Mbps

# enable stream policing in layer 2
*.*.bridging.streamRelay.typename = "StreamRelayLayer"

# gate scheduling configuration
*.gateSchedulingConfigurator.gateCycleDuration = 20ms

# TSN configuration
# 64B = 8B (UDP) + 20B (IP) + 4B (802.1R) + 6B (802.1Q) + 14B + 4B (ETH MAC) + 8B (ETH PHY)
*.tsnConfigurator.configuration = [{name: "S1", application: "app[0]", source: "source", destination: "destination", \
                                    priority: 0, packetFilter: "*", \
                                    packetLength: 100B + 64B, packetInterval: 5ms, maxLatency: 100us, \
                                    nodeFailureProtection: [{any: 1, of: "s2a or s2b or s3a or s3b"}], \
                                    linkFailureProtection: [{any: 1, of: "*->* and not source->s1"}, \
                                                            {any: 2, of: "s1->s2a or s2a->s2b or s2b->s3b"}, \
                                                            {any: 2, of: "s1->s2b or s2b->s2a or s2a->s3a"}]}]

# visualizer
*.visualizer.tsnConfigurationVisualizer.displayTrees = true
*.visualizer.tsnConfigurationVisualizer.lineStyle = "dashed"
*.visualizer.streamRedundancyConfigurationVisualizer.displayTrees = true
*.visualizer.streamRedundancyConfigurationVisualizer.lineColor = "black"
