[General]
network = InVehicleNetworkExample
description = "(abstract)"

# packet name
*.*.app[0].source.packetNameFormat = "%N-%c"

# steering
*.steering.numApps = 1
*.steering.app[0].typename = "UdpApp"
*.steering.app[0].source.packetLength = 100B
*.steering.app[0].source.productionInterval = 5ms
*.steering.app[0].io.destPort = 1000
*.steering.app[0].io.destAddress = "hud"

# wheel
*.wheel*.numApps = 1
*.wheel*.app[0].typename = "UdpApp"
*.wheel*.app[0].source.packetLength = 100B
*.wheel*.app[0].source.productionInterval = 5ms
*.wheel*.app[0].io.destAddress = "hud"
*.wheel1.app[0].io.destPort = 1001
*.wheel2.app[0].io.destPort = 1002
*.wheel3.app[0].io.destPort = 1003
*.wheel4.app[0].io.destPort = 1004

# lidar
*.lidar.numApps = 1
*.lidar.app[0].typename = "UdpApp"
*.lidar.app[0].source.packetLength = 1000B
*.lidar.app[0].source.productionInterval = 1ms
*.lidar.app[0].io.destPort = 1005
*.lidar.app[0].io.destAddress = "hud"

# camera
*.camera*.numApps = 1
*.camera*.app[0].typename = "UdpApp"
*.camera*.app[0].source.packetLength = 1000B
*.camera*.app[0].source.productionInterval = 1ms
*.camera*.app[0].io.destAddress = "hud"
*.camera1.app[0].io.destPort = 1006
*.camera2.app[0].io.destPort = 1007
*.camera3.app[0].io.destPort = 1008
*.camera4.app[0].io.destPort = 1009

# infotainment
*.obu.numApps = 1
*.obu.app[0].typename = "UdpApp"
*.obu.app[0].source.packetLength = 1000B
*.obu.app[0].source.productionInterval = 5ms
*.obu.app[0].io.destPort = 1010
*.obu.app[0].io.destAddress = "hud"

# sink applications
*.hud.numApps = 11
*.hud.app[*].typename = "UdpSink"
*.hud.app[0].localPort = 1000
*.hud.app[1].localPort = 1001
*.hud.app[2].localPort = 1002
*.hud.app[3].localPort = 1003
*.hud.app[4].localPort = 1004
*.hud.app[5].localPort = 1005
*.hud.app[6].localPort = 1006
*.hud.app[7].localPort = 1007
*.hud.app[8].localPort = 1008
*.hud.app[9].localPort = 1009
*.hud.app[10].localPort = 1010

# avoid ARP
*.*.ipv4.arp.typename = "GlobalArp"
*.*Switch.macTable.addressTable = [{address: "hud", interface: "eth0"}]

# disable legacy Ethernet
*.*.ethernet.typename = "EthernetLayer"
*.*.eth[*].typename = "LayeredEthernetInterface"

# bitrates
*.frontSwitch.eth[0..2].bitrate = 1Gbps
*.rearSwitch.eth[0..1].bitrate = 1Gbps
*.hud.eth[0].bitrate = 1Gbps
*.*.eth[*].bitrate = 100Mbps

[Config NoPriorityQueueing]
description = "no priority queueing"

[Config NoTAS]
description = "without time aware shaping"

# ethernet TSN
*.*Switch.eth[*].macLayer.queue.typename = "PriorityQueue"
*.*Switch.eth[*].macLayer.queue.numQueues = 4
*.*Switch.eth[*].macLayer.queue.classifier.typename = "ContentBasedClassifier"
*.*Switch.eth[*].macLayer.queue.classifier.packetFilters = "wheel* or steering;lidar*;camera*;obu*"
*.*Switch.eth[*].macLayer.queue.classifier.packetDataFilters = "*;*;*;*"

[Config TASBase]
description = "with time aware shaping"

# ethernet TSN
*.*Switch.eth[*].macLayer.queue.typename = "GatingPriorityQueue"
*.*Switch.eth[*].macLayer.queue.numQueues = 4
*.*Switch.eth[*].macLayer.queue.buffer.typename = ""
*.*Switch.eth[*].macLayer.queue.classifier.typename = "ContentBasedClassifier"
*.*Switch.eth[*].macLayer.queue.classifier.packetFilters = "wheel* or steering;lidar*;camera*;obu*"
*.*Switch.eth[*].macLayer.queue.classifier.packetDataFilters = "*;*;*;*"
*.*Switch.eth[*].macLayer.queue.queue[*].typename = "DropTailQueue"

# stream reservation
*.gateSchedulingConfigurator.gateCycleDuration = 5ms
# 54B = 8B (UDP) + 20B (IP) + 14B + 4B (ETH MAC) + 8B (ETH PHY)
*.gateSchedulingConfigurator.configuration = \
   [{priority: 0, application: "app[0]", source: "wheel*", destination: "hud", packetLength: 100B + 54B, packetInterval: 5ms, maxLatency: 100us}, \
    {priority: 0, application: "app[0]", source: "steering", destination: "hud", packetLength: 100B + 54B, packetInterval: 5ms, maxLatency: 100us}, \
    {priority: 1, application: "app[0]", source: "lidar", destination: "hud", packetLength: 1000B + 54B, packetInterval: 1ms, maxLatency: 500us}, \
    {priority: 2, application: "app[0]", source: "camera*", destination: "hud", packetLength: 1000B + 54B, packetInterval: 1ms, maxLatency: 5ms}, \
    {priority: 3, application: "app[0]", source: "obu", destination: "hud", packetLength: 1000B + 54B, packetInterval: 5ms, maxLatency: 5ms}]

# gate scheduling visualization
*.visualizer.gateVisualizer.displayGates = true
*.visualizer.gateVisualizer.displayDuration = 100us
*.visualizer.gateVisualizer.gateFilter = "**.eth[0].**"
*.visualizer.gateVisualizer.height = 16

[Config AlwaysOpenTAS]
description = "Always open gates using time aware shaping"
extends = TASBase

*.gateSchedulingConfigurator.typename = "AlwaysOpenGateSchedulingConfigurator"

[Config SimpleTAS]
description = "Simple eager scheduler based time aware shaping"
extends = TASBase

*.gateSchedulingConfigurator.typename = "SimpleGateSchedulingConfigurator"

[Config Z3TAS]
description = "Native Z3 SAT solver based time aware shaping"
extends = TASBase

*.gateSchedulingConfigurator.typename = "Z3GateSchedulingConfigurator"

[Config TSNschedTAS]
description = "External TSNsched tool based time aware shaping"
extends = TASBase

*.gateSchedulingConfigurator.typename = "TSNschedTASGateSchedulingConfigurator"

[Config BrokenCameraNoPriorityQueueing]
description = "one camera produces 40 times higher traffic without priority queueing"
extends = NoPriorityQueueing
*.camera1.app[0].source.productionInterval = 25us

[Config BrokenCameraNoTAS]
description = "one camera produces 40 times higher traffic without time aware shaping"
extends = NoTAS

*.camera1.app[0].source.productionInterval = 25us

[Config BrokenCameraTASBase]
description = "one camera produces 40 times higher traffic with time aware shaping"
extends = TASBase

*.camera1.app[0].source.productionInterval = 25us

[Config BrokenCameraAlwaysOpenTAS]
description = "Always open gates using time aware shaping with one camera that produces 40 times higher traffic with time aware shaping"
extends = BrokenCameraTASBase

*.gateSchedulingConfigurator.typename = "AlwaysOpenGateSchedulingConfigurator"

[Config BrokenCameraSimpleTAS]
description = "Simple eager scheduler based time aware shaping with one camera that produces 40 times higher traffic with time aware shaping"
extends = BrokenCameraTASBase

*.gateSchedulingConfigurator.typename = "SimpleGateSchedulingConfigurator"

[Config BrokenCameraZ3TAS]
description = "Native Z3 SAT solver based time aware shaping with one camera that produces 40 times higher traffic with time aware shaping"
extends = TASBase

*.gateSchedulingConfigurator.typename = "Z3GateSchedulingConfigurator"

[Config BokenCameraTSNschedTAS]
description = "External TSNsched tool based time aware shaping with one camera that produces 40 times higher traffic with time aware shaping"
extends = BrokenCameraTASBase

*.gateSchedulingConfigurator.typename = "TSNschedTASGateSchedulingConfigurator"
