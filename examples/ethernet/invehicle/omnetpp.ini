[General]
description = "This is a complex Ethernet TSN (Time-Sensitive Networking) example with time-aware shaping, Z3 SAT based gate scheduling, clock drift, time synchronization, credit-based shaping, per-stream filtering and policying, stream redundancy, unicast and multicast streams, link failure protection, frame preemption, cut-through switching, etc."
network = InVehicleExample
#record-eventlog = true

# disable protocols
*.*.hasTcp = false
*.*.hasUdp = false
#*.*.hasIpv4 = false # TODO breaks simulation because no routing table means bridge node
# enable/disable IEEE 802.2 LLC layer
*.*Switch.llc.typename = ""
*.client*.llc.typename = "Ieee8022Llc"

# steering applications
*.steering.numApps = 1
*.steering.app[0].typename = "Ieee8022LlcApp"
*.steering.app[0].source.packetNameFormat = "%N->engineActuator:CDT-%c"
*.steering.app[0].source.packetLength = 175B
*.steering.app[0].source.productionInterval = 500us
*.steering.app[0].io.interface = "eth0"
*.steering.app[0].io.remoteAddress = "engineActuator"
*.steering.app[0].io.remoteSap = 0

# wheel applications
*.*Wheel.numApps = 1
*.*Wheel.app[0].typename = "Ieee8022LlcApp"
*.*Wheel.app[0].source.packetNameFormat = "%N->engineActuator:CDT-%c"
*.*Wheel.app[0].source.packetLength = 175B
*.*Wheel.app[0].source.productionInterval = 500us
*.*Wheel.app[0].io.interface = "eth0"
*.*Wheel.app[0].io.remoteAddress = "engineActuator"
*.frontLeftWheel.app[0].io.remoteSap = 1
*.frontRightWheel.app[0].io.remoteSap = 2
*.rearLeftWheel.app[0].io.remoteSap = 3
*.rearRightWheel.app[0].io.remoteSap = 4

# lidar applications
*.lidar.numApps = 1
*.lidar.app[0].typename = "Ieee8022LlcApp"
*.lidar.app[0].source.packetNameFormat = "%N->hud:ClassA-%c"
*.lidar.app[0].source.packetLength = 325B
*.lidar.app[0].source.productionInterval = 250us
*.lidar.app[0].io.interface = "eth0"
*.lidar.app[0].io.remoteAddress = "hud"
*.lidar.app[0].io.remoteSap = 0

# camera applications
*.*Camera.numApps = 1
*.*Camera.app[0].typename = "Ieee8022LlcApp"
*.*Camera.app[0].source.packetNameFormat = "%N->hud+obu:ClassA-%c"
*.*Camera.app[0].source.packetLength = 325B
*.*Camera.app[0].source.productionInterval = 125us
*.*Camera.app[0].io.interface = "eth0"
*.*Camera.app[0].io.remoteAddress = "01:AA:00:00:00:00"
*.frontLeftCamera.app[0].io.remoteSap = 1
*.frontRightCamera.app[0].io.remoteSap = 2
*.rearLeftCamera.app[0].io.remoteSap = 3
*.rearRightCamera.app[0].io.remoteSap = 4

# obu applications
*.obu.numApps = 6
*.obu.app[0].typename = "Ieee8022LlcApp"
*.obu.app[0].source.packetNameFormat = "%N->rearDisplay:ClassB-%c"
*.obu.app[0].source.packetLength = 325B
*.obu.app[0].source.productionInterval = 250us
*.obu.app[0].io.interface = "eth0"
*.obu.app[0].io.remoteAddress = "rearDisplay"
*.obu.app[0].io.remoteSap = 0
*.obu.app[1].typename = "Ieee8022LlcApp"
*.obu.app[1].source.packetNameFormat = "%N->hud:BestEffort-%c"
*.obu.app[1].source.packetLength = 325B
*.obu.app[1].source.productionInterval = 125us
*.obu.app[1].io.interface = "eth0"
*.obu.app[1].io.remoteAddress = "hud"
*.obu.app[1].io.remoteSap = 5
*.obu.app[2..5].typename = "Ieee8022LlcSink"
*.obu.app[2..5].io.localAddress = "01:AA:00:00:00:00"
*.obu.app[2].io.localSap = 1
*.obu.app[3].io.localSap = 2
*.obu.app[4].io.localSap = 3
*.obu.app[5].io.localSap = 4

# engine actuator applications
*.engineActuator.numApps = 5
*.engineActuator.app[*].typename = "Ieee8022LlcSink"
*.engineActuator.app[0].io.localSap = 0
*.engineActuator.app[1].io.localSap = 1
*.engineActuator.app[2].io.localSap = 2
*.engineActuator.app[3].io.localSap = 3
*.engineActuator.app[4].io.localSap = 4

# hud applications
*.hud.numApps = 7
*.hud.app[0].typename = "Ieee8022LlcApp"
*.hud.app[0].source.packetNameFormat = "%N->rearDisplay:ClassB-%c"
*.hud.app[0].source.packetLength = 325B
*.hud.app[0].source.productionInterval = 250us
*.hud.app[0].io.interface = "eth0"
*.hud.app[0].io.remoteAddress = "rearDisplay"
*.hud.app[0].io.remoteSap = 1
*.hud.app[1..6].typename = "Ieee8022LlcSink"
*.hud.app[1].io.localSap = 0
*.hud.app[2].io.localSap = 1
*.hud.app[3].io.localSap = 2
*.hud.app[4].io.localSap = 3
*.hud.app[5].io.localSap = 4
*.hud.app[6].io.localSap = 5

# rear display applications
*.rearDisplay.numApps = 2
*.rearDisplay.app[*].typename = "Ieee8022LlcSink"
*.rearDisplay.app[0].io.localSap = 0
*.rearDisplay.app[1].io.localSap = 1

# disable ARP protocol
*.*.ipv4.arp.typename = "GlobalArp"

# fill MAC address tables
*.*Switch.macTable.addressTable = [{address: "hud", interface: "eth0"}]

# replace legacy Ethernet with the layered
*.*.ethernet.typename = "EthernetLayer"
*.*.eth[*].typename = "LayeredEthernetInterface"

# TODO enable Ethernet cut-through on frontSwitch
#*.frontSwitch.enableCutthrough = true
#*.frontSwitch.eth[0].typename = "LayeredEthernetInterface"
#*.frontSwitch.eth[0].phyLayer.typename = "EthernetStreamingPhyLayer"

# TODO enable Ethernet preemption for best effort traffic
#*.*Switch.eth[*].macLayer.typename = "EthernetPreemptingMacLayer"
#*.*Switch.eth[*].phyLayer.typename = "EthernetPreemptingPhyLayer"

# bitrates
*.frontLeftSwitch.eth[0..1].bitrate = 1Gbps
*.frontRightSwitch.eth[0..1].bitrate = 1Gbps
*.rearLeftSwitch.eth[0..1].bitrate = 1Gbps
*.rearRightSwitch.eth[0..1].bitrate = 1Gbps
*.frontSwitch.eth[0..4].bitrate = 1Gbps
*.rearSwitch.eth[0..4].bitrate = 1Gbps
*.hud.eth[0].bitrate = 1Gbps
*.obu.eth[0].bitrate = 1Gbps
*.*.eth[*].bitrate = 100Mbps

# TODO per-stream filtering and policying

# time aware shaper
*.*Switch.eth[*].macLayer.queue.typename = "GatingPriorityQueue"
*.*Switch.eth[*].macLayer.queue.numQueues = 4
*.*Switch.eth[*].macLayer.queue.buffer.typename = ""
*.*Switch.eth[*].macLayer.queue.classifier.typename = "ContentBasedClassifier"
*.*Switch.eth[*].macLayer.queue.classifier.packetFilters = "wheel* or steering;lidar*;camera*;obu*"
*.*Switch.eth[*].macLayer.queue.classifier.packetDataFilters = "*;*;*;*"
*.*Switch.eth[*].macLayer.queue.queue[*].typename = "DropTailQueue"

# credit based shaper for AVB classes
*.*Switch.eth[*].macLayer.queue.gate[1..2].typename = "CreditBasedGate"
*.*Switch.eth[*].macLayer.queue.gate[*].idleCreditGainRate = 1000
*.*Switch.eth[*].macLayer.queue.gate[1].transmitCreditSpendRate = 8000
*.*Switch.eth[*].macLayer.queue.gate[2].transmitCreditSpendRate = 2000

# best effort has no gates but lowest priority
*.*Switch.eth[*].macLayer.queue.gate[3].typename = ""

# enable stream policing in layer 2
*.*Switch.bridging.typename = "BridgingLayer"
*.*Switch.bridging.streamPolicy.typename = "StreamRelayLayer"
*.*Switch.ieee8021r.typename = "Ieee8021rProtocol"
*.*Switch.ieee8021q.typename = "Ieee8021qProtocol"
*.*.ieee8021r.typename = "Ieee8021rLayer"
*.*.ieee8021q.typename = "Ieee8021qProtocol"

# always use 802.1R protocol for egress traffic on all network interfaces
*.*.eth[*].protocol = "ieee8021rtag"

# clock
#*.*.clock.typename = "SettableClock"
#*.*.clock.oscillator.typename = "ConstantDriftOscillator"
#*.*.clock.oscillator.driftRate = uniform(-500ppm, 500ppm)

# time synchronization protocol
#*.*Switch.hasGptp = true

#*.*Switch.gptp.syncInterval = 500us
#*.*Switch.gptp.pdelayInterval = 1ms
#*.*Switch.gptp.pdelayInitialOffset = 0ms

#*.frontSwitch.gptp.gptpNodeType = "MASTER_NODE"
#*.frontSwitch.gptp.masterPorts = ["eth0", "eth1", "eth2"]  # eth*

#*.*Switch.gptp.gptpNodeType = "SLAVE_NODE"
#*.*Switch.gptp.slavePort = "eth0"

# TODO Gptp app
#*.*.numApps = 2
#*.*.app[1].typename = "Gptp"
#*.*.app[1].gptpNodeType = "SLAVE_NODE"
#*.*.app[1].slavePort = "eth0"
#*.*.app[1].syncInterval = 500us
#*.*.app[1].pdelayInterval = 1ms

# application packet sources use the network node clock 
#*.*.app[*].source.clockModule = "^.^.clock"

# periodic gating mechanism ethernet interface subqueues use the network node clock 
#*.*.eth[*].macLayer.queue.gate[*].clockModule = "^.^.^.^.clock"

# gate scheduling
*.gateSchedulingConfigurator.typename = "AlwaysOpenGateSchedulingConfigurator"
*.gateSchedulingConfigurator.gateCycleDuration = 500us

# TSN configuration
# 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
# 64B = 8B (UDP) + 20B (IP) + 4B (802.1R) + 6B (802.1Q) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.tsnConfigurator.configuration = [# single link failure protection redundancy for CDT traffic
                                   {name: "frontLeftWheel", application: "app[0]",
                                    source: "frontLeftWheel", destination: "engineActuator",
                                    priority: 0, packetFilter: "*",
                                    packetLength: 175B + 64B, packetInterval: 500us, maxLatency: 100us,
                                    linkFailureProtection: [{any: 1, of: "not *->engineActuator and not frontLeftWheel->*"}]},
                                   {name: "frontRightWheel", application: "app[0]",
                                    source: "frontRightWheel", destination: "engineActuator",
                                    priority: 0, packetFilter: "*",
                                    packetLength: 175B + 64B, packetInterval: 500us, maxLatency: 100us,
                                    linkFailureProtection: [{any: 1, of: "not *->engineActuator and not frontRightWheel->*"}]},
                                   {name: "rearLeftWheel", application: "app[0]",
                                    source: "rearLeftWheel", destination: "engineActuator",
                                    priority: 0, packetFilter: "*",
                                    packetLength: 175B + 64B, packetInterval: 500us, maxLatency: 100us,
                                    linkFailureProtection: [{any: 1, of: "not *->engineActuator and not rearLeftWheel->*"}]},
                                   {name: "rearRightWheel", application: "app[0]",
                                    source: "rearRightWheel", destination: "engineActuator",
                                    priority: 0, packetFilter: "*",
                                    packetLength: 175B + 64B, packetInterval: 500us, maxLatency: 100us,
                                    linkFailureProtection: [{any: 1, of: "not *->engineActuator and not rearRightWheel->*"}]},
                                   {name: "steering", application: "app[0]",
                                    source: "steering", destination: "engineActuator",
                                    priority: 0, packetFilter: "*",
                                    packetLength: 175B + 64B, packetInterval: 500us, maxLatency: 100us,
                                    linkFailureProtection: [{any: 1, of: "not *->engineActuator and not steering->*"}]},
                                   # AVB class A streams
 # TODO these are not needed because we don't allocate slots for these streams?
                                   {name: "frontLeftCamera", application: "app[0]", destinationAddress: "01:AA:00:00:00:00",
                                    source: "frontLeftCamera", destination: "hud or obu",
                                    priority: 1, packetFilter: "*",
                                    packetLength: 325B + 54B, packetInterval: 125us, maxLatency: 2ms},
                                   {name: "frontRightCamera", application: "app[0]", destinationAddress: "01:AA:00:00:00:00",
                                    source: "frontRightCamera", destination: "hud or obu",
                                    priority: 1, packetFilter: "*",
                                    packetLength: 325B + 54B, packetInterval: 125us, maxLatency: 2ms},
                                   {name: "rearLeftCamera", application: "app[0]", destinationAddress: "01:AA:00:00:00:00",
                                    source: "rearLeftCamera", destination: "hud or obu",
                                    priority: 1, packetFilter: "*",
                                    packetLength: 325B + 54B, packetInterval: 125us, maxLatency: 2ms},
                                   {name: "rearRightCamera", application: "app[0]", destinationAddress: "01:AA:00:00:00:00",
                                    source: "rearRightCamera", destination: "hud or obu",
                                    priority: 1, packetFilter: "*",
                                    packetLength: 325B + 54B, packetInterval: 125us, maxLatency: 2ms},
                                   {name: "lidar", application: "app[0]",
                                    source: "lidar", destination: "hud",
                                    priority: 1, packetFilter: "*",
                                    packetLength: 325B + 54B, packetInterval: 125us, maxLatency: 2ms},
                                   # AVB class B streams
                                   {name: "obu", application: "app[0]",
                                    source: "obu", destination: "rearDisplay",
                                    priority: 2, packetFilter: "*",
                                    packetLength: 325B + 54B, packetInterval: 250us, maxLatency: 50ms},
                                   {name: "hud", application: "app[0]",
                                    source: "hud", destination: "rearDisplay",
                                    priority: 2, packetFilter: "*",
                                    packetLength: 325B + 54B, packetInterval: 250us, maxLatency: 50ms},
                                   # best effort streams
                                   {name: "bestEffort", application: "app[0]",
                                    source: "obu", destination: "hud",
                                    priority: 2, packetFilter: "*",
                                    packetLength: 325B + 54B, packetInterval: 125us}]

# TSN visualizer
*.visualizer.tsnConfigurationVisualizer.displayTrees = true
*.visualizer.tsnConfigurationVisualizer.streamFilter = "rearRightWheel"
*.visualizer.tsnConfigurationVisualizer.lineStyle = "dashed"

# Stream redundancy visualizer
*.visualizer.streamRedundancyConfigurationVisualizer.displayTrees = true
*.visualizer.streamRedundancyConfigurationVisualizer.streamFilter = "rearRightWheel"
*.visualizer.streamRedundancyConfigurationVisualizer.lineColor = "green4"

# gate scheduling visualization
*.visualizer.gateVisualizer.displayGates = true
*.visualizer.gateVisualizer.displayDuration = 100us
*.visualizer.gateVisualizer.gateFilter = "**.eth[0].queue.gate[0]"
*.visualizer.gateVisualizer.height = 16
