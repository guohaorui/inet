[General]
network = MixedShaperExample

**.arp.typename = "GlobalArp"

*.*.hasTimeSynchronization = false

# source
*.source.numApps = 2
*.source.app[*].typename = "UdpApp"
*.source.app[0].source.packetNameFormat = "high-priority-%c"
*.source.app[1].source.packetNameFormat = "best-effort-%c"
*.source.app[*].io.destAddress = "destination"
*.source.app[0].io.destPort = 1000
*.source.app[1].io.destPort = 1001

# high priority traffic ~800kbps
*.source.app[0].source.packetLength = 100B
*.source.app[0].source.productionInterval = truncnormal(1ms, 0.1ms)

# best effort traffic ~80Mbps
*.source.app[1].source.packetLength = 1000B
*.source.app[1].source.productionInterval = truncnormal(100us, 10us)

# destination
*.destination.numApps = 2
*.destination.app[*].typename = "UdpSink"
*.destination.app[0].localPort = 1000
*.destination.app[1].localPort = 1001

# configure Ethernet link speed
*.*.eth[*].bitrate = 100Mbps

# enable stream policing in layer 2
*.source.ieee8021r.typename = "Ieee8021rLayer"
*.destination.ieee8021r.typename = "Ieee8021rLayer"

# always use 802.1R protocol for egress traffic on all network interfaces
*.*.eth[*].protocol = "ieee8021rtag"

# configure all egress traffic as part of stream s1, start sequence numbering
*.source.ieee8021r.policy.streamIdentifier.identifier.mapping = [{packetFilter: "high-priority*", stream: "s1"},
                                                                 {packetFilter: "best-effort*", stream: "s2"}]
# encode egress stream s1 to VLAN 1
*.source.ieee8021r.policy.streamCoder.encoder.mapping = [{stream: "s1", vlan: 0},
                                                         {stream: "s2", vlan: 1}]

# configure stream decoding
*.switch.bridging.streamCoder.decoder.mapping = [{source: "source", destination: "destination", vlan: 0, stream: "s1"},
                                                 {source: "source", destination: "destination", vlan: 1, stream: "s2"}]

# enable per-stream filtering
*.switch.bridging.streamFilter.ingress.typename = "DualIeee8021qciFilter"
*.switch.bridging.streamFilter.ingress.numStreams = 2
*.switch.bridging.streamFilter.ingress.classifier.typename = "StreamClassifier"
*.switch.bridging.streamFilter.ingress.classifier.mapping = {s1: 0, s2: 1}

# configure per-stream filtering
# high priority stream
*.switch.bridging.streamFilter.ingress.meter1[0].typename = "DualRateThreeColorMeter"
*.switch.bridging.streamFilter.ingress.meter1[0].committedInformationRate = 800kbps
*.switch.bridging.streamFilter.ingress.meter1[0].committedBurstSize = 10kB
*.switch.bridging.streamFilter.ingress.meter1[0].excessInformationRate = 80kbps
*.switch.bridging.streamFilter.ingress.meter1[0].excessBurstSize = 1kB
*.switch.bridging.streamFilter.ingress.filter1[0].typename = "LabelFilter"
*.switch.bridging.streamFilter.ingress.meter2[0].typename = "EligibilityTimeMeter"
*.switch.bridging.streamFilter.ingress.meter2[0].committedInformationRate = 800kbps
*.switch.bridging.streamFilter.ingress.meter2[0].committedBurstSize = 10kB
*.switch.bridging.streamFilter.ingress.meter2[0].maxResidenceTime = 10ms
*.switch.bridging.streamFilter.ingress.filter2[0].typename = "EligibilityTimeFilter"
# best effort stream 
*.switch.bridging.streamFilter.ingress.meter1[1].typename = "DualRateThreeColorMeter"
*.switch.bridging.streamFilter.ingress.meter1[1].committedInformationRate = 80Mbps
*.switch.bridging.streamFilter.ingress.meter1[1].committedBurstSize = 100kB
*.switch.bridging.streamFilter.ingress.meter1[1].excessInformationRate = 8Mbps
*.switch.bridging.streamFilter.ingress.meter1[1].excessBurstSize = 10kB
*.switch.bridging.streamFilter.ingress.filter1[1].typename = "LabelFilter"
*.switch.bridging.streamFilter.ingress.meter2[1].typename = ""
*.switch.bridging.streamFilter.ingress.filter2[1].typename = ""

# queueing in TSN ethernet switches
*.switch.eth[*].macLayer.queue.typename = "ShaperPriorityQueue"
*.switch.eth[*].macLayer.queue.numShapers = 2
*.switch.eth[*].macLayer.queue.classifier.typename = "StreamClassifier"
*.switch.eth[*].macLayer.queue.classifier.mapping = {s1: 0, s2: 1}
*.switch.eth[*].macLayer.queue.shaper[0].typename = "AsynchronousShaper"
*.switch.eth[*].macLayer.queue.shaper[1].typename = "CreditBasedShaper"
*.switch.eth[*].macLayer.queue.shaper[1].gate.idleCreditGainRate = 1
*.switch.eth[*].macLayer.queue.shaper[1].gate.transmitCreditSpendRate = 2
